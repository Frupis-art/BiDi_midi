import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { ArrowUp, ArrowDown, Upload, Download, RotateCcw, Trash2 } from 'lucide-react';
import { toast } from 'sonner';

export interface MidiFile {
  id: string;
  name: string;
  author: string;
  sequence1: string;
  sequence2: string;
  rating: number;
  userVotes: Record<string, 'up' | 'down'>;
  createdAt: number;
}

interface MidiGalleryProps {
  onLoadFile: (sequence1: string, sequence2: string) => void;
}

const MidiGallery: React.FC<MidiGalleryProps> = ({ onLoadFile }) => {
  const [midiFiles, setMidiFiles] = useState<MidiFile[]>([]);
  const [sortBy, setSortBy] = useState<'rating' | 'date'>('rating');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [showUploadDialog, setShowUploadDialog] = useState(false);
  const [uploadName, setUploadName] = useState('');
  const [uploadAuthor, setUploadAuthor] = useState('');
  const [adminSequences, setAdminSequences] = useState<Record<string, string[]>>({});
  const [adminUnlocked, setAdminUnlocked] = useState<Record<string, boolean>>({});
  const [currentUserId] = useState(() => {
    let userId = localStorage.getItem('midiGalleryUserId');
    if (!userId) {
      userId = 'user_' + Math.random().toString(36).substr(2, 9);
      localStorage.setItem('midiGalleryUserId', userId);
    }
    return userId;
  });

  // –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: 1‚Üë, 2‚Üì, 6‚Üë, 4‚Üì
  const ADMIN_SEQUENCE = ['up', 'down', 'down', 'up', 'up', 'up', 'up', 'up', 'up', 'down', 'down', 'down', 'down'];

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ localStorage
  useEffect(() => {
    const savedFiles = localStorage.getItem('midiGalleryFiles');
    if (savedFiles) {
      try {
        setMidiFiles(JSON.parse(savedFiles));
      } catch (error) {
        console.error('Error loading MIDI files:', error);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ localStorage
  const saveFiles = (files: MidiFile[]) => {
    localStorage.setItem('midiGalleryFiles', JSON.stringify(files));
    setMidiFiles(files);
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Ñ–∞–π–ª–∞
  const generateFileId = () => {
    return Math.random().toString(36).substr(2, 5).toUpperCase();
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –≥–∞–ª–µ—Ä–µ—é
  const handleUploadToGallery = (sequence1: string, sequence2: string) => {
    if (!uploadName.trim() || !uploadAuthor.trim()) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    if (uploadName.length < 3 || uploadName.length > 8) {
      toast.error('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 8 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    if (uploadAuthor.length < 3 || uploadAuthor.length > 8) {
      toast.error('–ê–≤—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 8 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã)
    const validChars = /^[a-zA-Z–∞-—è–ê-–Ø0-9\s\-]+$/;
    if (!validChars.test(uploadName) || !validChars.test(uploadAuthor)) {
      toast.error('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã');
      return;
    }

    const fileId = generateFileId();
    const newFile: MidiFile = {
      id: fileId,
      name: uploadName.trim(),
      author: uploadAuthor.trim(),
      sequence1,
      sequence2,
      rating: 0,
      userVotes: {},
      createdAt: Date.now()
    };

    const updatedFiles = [...midiFiles, newFile];
    saveFiles(updatedFiles);
    
    setUploadName('');
    setUploadAuthor('');
    setShowUploadDialog(false);
    toast.success(`–§–∞–π–ª ${uploadName}_${uploadAuthor}_${fileId}.midi –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–∞–ª–µ—Ä–µ—é`);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const handleAdminSequence = (fileId: string, action: 'up' | 'down') => {
    const currentSequence = adminSequences[fileId] || [];
    const newSequence = [...currentSequence, action];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –Ω–∞—á–∞–ª–æ–º –∞–¥–º–∏–Ω—Å–∫–æ–π
    const isValidSoFar = ADMIN_SEQUENCE.slice(0, newSequence.length).every(
      (expectedAction, index) => expectedAction === newSequence[index]
    );
    
    if (!isValidSoFar) {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
      setAdminSequences(prev => ({
        ...prev,
        [fileId]: []
      }));
      console.log(`[ADMIN] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è ${fileId}, —Å–±—Ä–æ—Å`);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    setAdminSequences(prev => ({
      ...prev,
      [fileId]: newSequence
    }));
    
    console.log(`[ADMIN] –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è ${fileId}: ${newSequence.join(', ')}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∞–¥–º–∏–Ω—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (newSequence.length === ADMIN_SEQUENCE.length) {
      console.log(`[ADMIN] –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ñ–∞–π–ª–∞ ${fileId}`);
      setAdminUnlocked(prev => ({
        ...prev,
        [fileId]: true
      }));
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      setAdminSequences(prev => ({
        ...prev,
        [fileId]: []
      }));
      
      toast.success('üîê –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã', { duration: 2000 });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setAdminUnlocked(prev => ({
          ...prev,
          [fileId]: false
        }));
      }, 10000);
    }
  };

  // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ñ–∞–π–ª —Å –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
  const handleVote = (fileId: string, voteType: 'up' | 'down') => {
    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    handleAdminSequence(fileId, voteType);
    
    const updatedFiles = midiFiles.map(file => {
      if (file.id === fileId) {
        const newUserVotes = { ...file.userVotes };
        const currentVote = newUserVotes[currentUserId];
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≥–æ–ª–æ—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        if (currentVote === 'up') {
          file.rating--;
        } else if (currentVote === 'down') {
          file.rating++;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        if (currentVote !== voteType) {
          newUserVotes[currentUserId] = voteType;
          if (voteType === 'up') {
            file.rating++;
          } else {
            file.rating--;
          }
        } else {
          // –ï—Å–ª–∏ –≥–æ–ª–æ—Å —Ç–∞–∫–æ–π –∂–µ - —É–±–∏—Ä–∞–µ–º –µ–≥–æ
          delete newUserVotes[currentUserId];
        }
        
        return {
          ...file,
          userVotes: newUserVotes
        };
      }
      return file;
    });
    
    saveFiles(updatedFiles);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
  const handleDeleteFile = (fileId: string) => {
    const fileToDelete = midiFiles.find(f => f.id === fileId);
    if (!fileToDelete) return;
    
    const confirmMessage = `–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${fileToDelete.name}_${fileToDelete.author}_${fileToDelete.id}" –∏–∑ –≥–∞–ª–µ—Ä–µ–∏?`;
    if (window.confirm(confirmMessage)) {
      const updatedFiles = midiFiles.filter(file => file.id !== fileId);
      saveFiles(updatedFiles);
      
      // –û—á–∏—â–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
      setAdminUnlocked(prev => {
        const newState = { ...prev };
        delete newState[fileId];
        return newState;
      });
      
      setAdminSequences(prev => {
        const newState = { ...prev };
        delete newState[fileId];
        return newState;
      });
      
      toast.success(`–§–∞–π–ª ${fileToDelete.name}_${fileToDelete.author}_${fileToDelete.id} —É–¥–∞–ª–µ–Ω`);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const handleLoadFile = (file: MidiFile) => {
    const confirmMessage = '–¢–µ–∫—É—â–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?';
    if (window.confirm(confirmMessage)) {
      onLoadFile(file.sequence1, file.sequence2);
      toast.success(`–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${file.name}_${file.author}_${file.id}`);
    }
  };

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ MIDI —Ñ–∞–π–ª–∞
  const handleDownloadFile = async (file: MidiFile) => {
    try {
      // –ü–∞—Ä—Å–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      const { parseNoteSequence } = await import('@/utils/midiUtils');
      const parsedNotes1 = parseNoteSequence(file.sequence1, (key: string) => key);
      const parsedNotes2 = parseNoteSequence(file.sequence2, (key: string) => key);
      
      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ MIDI
      const { exportMidi } = await import('@/utils/midiUtils');
      await exportMidi(parsedNotes1, parsedNotes2, 1, { 
        format: 'midi' as const
      });
      
      toast.success(`–°–∫–∞—á–∏–≤–∞–µ—Ç—Å—è: ${file.name}_${file.author}_${file.id}.midi`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ MIDI:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ MIDI —Ñ–∞–π–ª–∞');
    }
  };

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
  const sortedFiles = [...midiFiles].sort((a, b) => {
    if (sortBy === 'rating') {
      return sortOrder === 'desc' ? b.rating - a.rating : a.rating - b.rating;
    } else {
      return sortOrder === 'desc' ? b.createdAt - a.createdAt : a.createdAt - b.createdAt;
    }
  });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const toggleSortOrder = () => {
    setSortOrder(prev => prev === 'desc' ? 'asc' : 'desc');
  };

  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle className="text-xl">–ì–∞–ª–µ—Ä–µ—è MIDI</CardTitle>
        <div className="flex items-center gap-2">
          <span className="text-sm">–£–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –ø–æ:</span>
          <Select value={sortBy} onValueChange={(value: 'rating' | 'date') => setSortBy(value)}>
            <SelectTrigger className="w-32">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="rating">–†–µ–π—Ç–∏–Ω–≥</SelectItem>
              <SelectItem value="date">–ù–æ–≤–æ–µ</SelectItem>
            </SelectContent>
          </Select>
          <Button
            onClick={toggleSortOrder}
            variant="outline"
            size="sm"
            className="flex items-center gap-1"
          >
            <RotateCcw className="w-3 h-3" />
            {sortOrder === 'desc' ? 
              (sortBy === 'rating' ? '–ë–æ–ª—å—à–µ‚Üí–ú–µ–Ω—å—à–µ' : '–ù–æ–≤–µ–µ‚Üí–°—Ç–∞—Ä–µ–µ') : 
              (sortBy === 'rating' ? '–ú–µ–Ω—å—à–µ‚Üí–ë–æ–ª—å—à–µ' : '–°—Ç–∞—Ä–µ–µ‚Üí–ù–æ–≤–µ–µ')
            }
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {sortedFiles.length === 0 ? (
          <p className="text-muted-foreground text-center py-4">–ì–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞</p>
        ) : (
          <div className="space-y-2">
            {sortedFiles.map((file) => (
              <div key={file.id} className="flex items-center gap-2 p-2 border rounded-md">
                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <div className="flex gap-1">
                  <Button
                    onClick={() => handleLoadFile(file)}
                    variant="outline"
                    size="sm"
                    title="–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                  >
                    <Upload className="w-3 h-3" />
                  </Button>
                  <Button
                    onClick={() => handleDownloadFile(file)}
                    variant="outline"
                    size="sm"
                    title="–°–∫–∞—á–∞—Ç—å MIDI —Ñ–∞–π–ª"
                  >
                    <Download className="w-3 h-3" />
                  </Button>
                  
                  {/* –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                  {adminUnlocked[file.id] && (
                    <Button
                      onClick={() => handleDeleteFile(file.id)}
                      variant="destructive"
                      size="sm"
                      title="üîê –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª (–ê–î–ú–ò–ù)"
                      className="animate-pulse"
                    >
                      <Trash2 className="w-3 h-3" />
                    </Button>
                  )}
                </div>

                {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ */}
                <div className="flex-1 min-w-0">
                  <span className="text-sm font-mono truncate block">
                    {file.name}_{file.author}_{file.id}
                  </span>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è */}
                <div className="flex gap-1">
                  <Button
                    onClick={() => handleVote(file.id, 'up')}
                    variant={file.userVotes[currentUserId] === 'up' ? "default" : "outline"}
                    size="sm"
                    className="w-8 h-8 p-0"
                  >
                    <ArrowUp className="w-3 h-3 text-green-600" />
                  </Button>
                  <Button
                    onClick={() => handleVote(file.id, 'down')}
                    variant={file.userVotes[currentUserId] === 'down' ? "destructive" : "outline"}
                    size="sm"
                    className="w-8 h-8 p-0"
                  >
                    <ArrowDown className="w-3 h-3 text-red-600" />
                  </Button>
                </div>

                {/* –†–µ–π—Ç–∏–Ω–≥ */}
                <div className="min-w-[3rem] text-center">
                  <span className={`text-sm font-semibold ${
                    file.rating < 0 ? 'text-red-600' : 'text-green-600'
                  }`}>
                    {file.rating}
                  </span>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* –î–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –≥–∞–ª–µ—Ä–µ—é */}
        <Dialog open={showUploadDialog} onOpenChange={setShowUploadDialog}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞–ª–µ—Ä–µ—é</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <Label htmlFor="upload-name">–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (3-8 —Å–∏–º–≤–æ–ª–æ–≤)</Label>
                <Input
                  id="upload-name"
                  value={uploadName}
                  onChange={(e) => setUploadName(e.target.value)}
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"
                  maxLength={8}
                />
              </div>
              <div>
                <Label htmlFor="upload-author">–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ (3-8 —Å–∏–º–≤–æ–ª–æ–≤)</Label>
                <Input
                  id="upload-author"
                  value={uploadAuthor}
                  onChange={(e) => setUploadAuthor(e.target.value)}
                  placeholder="–ê–≤—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"
                  maxLength={8}
                />
              </div>
              <div className="flex gap-2">
                <Button
                  onClick={() => setShowUploadDialog(false)}
                  variant="outline"
                  className="flex-1"
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button
                  onClick={() => {
                    // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
                  }}
                  className="flex-1"
                  disabled={!uploadName.trim() || !uploadAuthor.trim()}
                >
                  –î–æ–±–∞–≤–∏—Ç—å
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </CardContent>
    </Card>
  );
};

export { MidiGallery, type MidiGalleryProps };
export default MidiGallery;